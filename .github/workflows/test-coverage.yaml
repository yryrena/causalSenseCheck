name: test-coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      ## install dependencies (Imports + Suggests) AND covr
      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::covr
          needs: coverage

      ## optional debug: confirm Suggests installed
      - name: Debug installed packages
        run: |
          Rscript -e 'print(sessionInfo()); pkgs <- c("grf","AER","fixest","ggplot2","rmarkdown"); print(pkgs); print(sapply(pkgs, requireNamespace, quietly=TRUE))'

      ## run tests, compute coverage, and write LCOV report manually
      - name: Run tests & compute coverage (generate lcov manually)
        run: |
          Rscript -e '
            # 1. run coverage
            cov <- covr::package_coverage()
            print(cov)

            # 2. convert coverage object to a data.frame
            df <- as.data.frame(cov)

            # keep only rows with real line numbers
            df <- df[!is.na(df$line), , drop = FALSE]

            # helper: normalize file paths so Codecov can map them to repo files 
            normalize_path_for_repo <- function(path_vec) { 
              path_vec <- gsub("(?i)^.*causalSenseCheck/", "", path_vec, perl = TRUE) 
              path_vec <- gsub("(?i)^.*causalsensecheck/", "", path_vec, perl = TRUE) 
              paste0("causalsensecheck/", path_vec)
            }




            df$filename_clean <- normalize_path_for_repo(df$filename)

            # 3. write LCOV with cleaned paths + LF/LH summary per file
            write_lcov_df <- function(df, file = "coverage.lcov") {
              con <- file(file, open = "wt")
              on.exit(close(con), add = TRUE)

              ## split rows by filename
              files <- split(df, df$filename_clean)

              for (fn in names(files)) {
                block <- files[[fn]]

                ## make sure ints
                block$line  <- as.integer(block$line)
                block$value <- as.integer(block$value)

                ## aggregate coverage per line:
                ## some lines can appear more than once; take max hits
                max_hits_per_line <- tapply(block$value, block$line, max)

                ## LF: how many coverable lines in this file
                line_nums <- as.integer(names(max_hits_per_line))
                LF <- length(line_nums)

                ## LH: how many of those lines had hits > 0
                LH <- sum(max_hits_per_line > 0)

                ## start record
                writeLines("TN:", con)
                writeLines(paste0("SF:", fn), con)

                ## DA:<line>,<hits> for each executable line
                for (ln in sort(line_nums)) {
                  hits <- max_hits_per_line[[as.character(ln)]]
                  writeLines(paste0("DA:", ln, ",", hits), con)
                }

                ## summary lines that Codecov expects
                writeLines(paste0("LF:", LF), con)
                writeLines(paste0("LH:", LH), con)

                ## end of record
                writeLines("end_of_record", con)
              }
            }

            write_lcov_df(df, file = "coverage.lcov")
          '



      ## upload coverage.lcov to Codecov using their official uploader
      - name: Upload coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov --version

          SLUG="${GITHUB_REPOSITORY}"
          BRANCH="main"

          echo "Uploading coverage for slug=${SLUG}, branch=${BRANCH}, commit=${GITHUB_SHA} (token upload)"

          ./codecov \
            -f coverage.lcov \
            --slug "${SLUG}" \
            --branch "${BRANCH}" \
            --commit "${GITHUB_SHA}" \
            --env "git,github_actions" \
            --token "${CODECOV_TOKEN}" \
            -n "gha-${GITHUB_SHA}" \
            -F unittests \
            -v \
            -Z
